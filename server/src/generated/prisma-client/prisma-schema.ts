// Code generated by Prisma (prisma@1.29.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `
  type AggregateAlarm {
    count: Int!
  }

  type Alarm {
    id: ID!
    intId: Int!
    text: String
  }

  type AlarmConnection {
    pageInfo: PageInfo!
    edges: [AlarmEdge]!
    aggregate: AggregateAlarm!
  }

  input AlarmCreateInput {
    intId: Int!
    text: String
  }

  type AlarmEdge {
    node: Alarm!
    cursor: String!
  }

  enum AlarmOrderByInput {
    id_ASC
    id_DESC
    intId_ASC
    intId_DESC
    text_ASC
    text_DESC
    createdAt_ASC
    createdAt_DESC
    updatedAt_ASC
    updatedAt_DESC
  }

  type AlarmPreviousValues {
    id: ID!
    intId: Int!
    text: String
  }

  type AlarmSubscriptionPayload {
    mutation: MutationType!
    node: Alarm
    updatedFields: [String!]
    previousValues: AlarmPreviousValues
  }

  input AlarmSubscriptionWhereInput {
    mutation_in: [MutationType!]
    updatedFields_contains: String
    updatedFields_contains_every: [String!]
    updatedFields_contains_some: [String!]
    node: AlarmWhereInput
    AND: [AlarmSubscriptionWhereInput!]
    OR: [AlarmSubscriptionWhereInput!]
    NOT: [AlarmSubscriptionWhereInput!]
  }

  input AlarmUpdateInput {
    intId: Int
    text: String
  }

  input AlarmUpdateManyMutationInput {
    intId: Int
    text: String
  }

  input AlarmWhereInput {
    id: ID
    id_not: ID
    id_in: [ID!]
    id_not_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_gt: ID
    id_gte: ID
    id_contains: ID
    id_not_contains: ID
    id_starts_with: ID
    id_not_starts_with: ID
    id_ends_with: ID
    id_not_ends_with: ID
    intId: Int
    intId_not: Int
    intId_in: [Int!]
    intId_not_in: [Int!]
    intId_lt: Int
    intId_lte: Int
    intId_gt: Int
    intId_gte: Int
    text: String
    text_not: String
    text_in: [String!]
    text_not_in: [String!]
    text_lt: String
    text_lte: String
    text_gt: String
    text_gte: String
    text_contains: String
    text_not_contains: String
    text_starts_with: String
    text_not_starts_with: String
    text_ends_with: String
    text_not_ends_with: String
    AND: [AlarmWhereInput!]
    OR: [AlarmWhereInput!]
    NOT: [AlarmWhereInput!]
  }

  input AlarmWhereUniqueInput {
    id: ID
    intId: Int
  }

  type BatchPayload {
    count: Long!
  }

  scalar Long

  type Mutation {
    createAlarm(data: AlarmCreateInput!): Alarm!
    updateAlarm(data: AlarmUpdateInput!, where: AlarmWhereUniqueInput!): Alarm
    updateManyAlarms(
      data: AlarmUpdateManyMutationInput!
      where: AlarmWhereInput
    ): BatchPayload!
    upsertAlarm(
      where: AlarmWhereUniqueInput!
      create: AlarmCreateInput!
      update: AlarmUpdateInput!
    ): Alarm!
    deleteAlarm(where: AlarmWhereUniqueInput!): Alarm
    deleteManyAlarms(where: AlarmWhereInput): BatchPayload!
  }

  enum MutationType {
    CREATED
    UPDATED
    DELETED
  }

  interface Node {
    id: ID!
  }

  type PageInfo {
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
    endCursor: String
  }

  type Query {
    alarm(where: AlarmWhereUniqueInput!): Alarm
    alarms(
      where: AlarmWhereInput
      orderBy: AlarmOrderByInput
      skip: Int
      after: String
      before: String
      first: Int
      last: Int
    ): [Alarm]!
    alarmsConnection(
      where: AlarmWhereInput
      orderBy: AlarmOrderByInput
      skip: Int
      after: String
      before: String
      first: Int
      last: Int
    ): AlarmConnection!
    node(id: ID!): Node
  }

  type Subscription {
    alarm(where: AlarmSubscriptionWhereInput): AlarmSubscriptionPayload
  }
`;
